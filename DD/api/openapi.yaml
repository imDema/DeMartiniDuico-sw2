openapi: "3.0.3"
info:
  title: Clup
  version: "1.0"
servers:
  - url: https://127.0.0.1:5000/v1
paths:
  /login:
    post:
      tags:
        - "account"
      summary: "Logs in and returns the authentication  cookie"
      requestBody:
        required: true
        description: "A JSON object containing the login and password."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestLogin"
      security: []
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=abcdef12345ABCD; Path=/;
        "400":
          description: Invalid Credentials

  /register:
    post:
      tags:
        - "account"
      summary: "Request creation of a new account"
      security: []
      requestBody:
        description: "Credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestRegister"
      responses:
        "200":
          description: OK
        "400":
          description: Invalid data
  /register/confirm:
    get:
      tags:
        - "account"
      summary: "Submit email confirmation"
      description: "Finalizes account creation"
      operationId: "confirm_registration"
      parameters:
        - in: "query"
          name: "code"
          description: "Confirmation code received by email"
          required: true
          schema:
            type: "string"
      security: []
      responses:
        "201":
          description: "successful operation"
        "400":
          description: "Invalid code"
  /search:
    get:
      summary: Search for a shop by name
      description: Search for a shop by name
      operationId: "search_shop"
      security: []
      responses:
        "200":
          description: OK

  /tokens:
    get:
      summary: Get active tokens
      tags:
        - "booking"
        - "ticket"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"

              
      security:
        - customerAuth: []

  /ticket/est:
    get:
      summary: Get the estimated waiting time for a ticket
      tags:
        - "ticket"
      parameters:
        - in: "query"
          name: "code"
          description: "Ticket code"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueueEst"
        "400":
          description: "Invalid or expired code"
      security:
        - customerAuth: []

  # /booking/est:
  #   get:
  #     summary: Get the time untill the booking time slot
  #     tags:
  #       - "booking"
  #     parameters:
  #       - in: "query"
  #         name: "code"
  #         description: "Booking code"
  #         required: true
  #         schema:
  #           type: "string"
  #     responses:
  #       "200":
  #         description: OK
  #     security:
  #       - customerAuth: []

  /shop/{shop_id}:
    get:
      summary: "Get available shop information"
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK

  /shop/{shop_id}/ticket/new:
    post:
      tags:
        - "ticket"
      summary: Request a ticket for a shop
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestTicket"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenTicket"
        "400":
          description: Error
      security:
        - customerAuth: []

  /shop/{shop_id}/ticket/queue:
    get:
      summary: Get information about the queue status and approximate waiting time
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      tags:
        - "ticket"
      responses:
        "200":
          description: OK
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/QueueEst"

  /shop/{shop_id}/booking/new:
    post:
      tags:
        - "booking"
      summary: Request a booking for a shop
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestBooking"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenBooking"
        "400":
          description: Error
      security:
        - customerAuth: []

  /shop/{shop_id}/booking/availability:
    get:
      summary: Get information about the time slot availability for bookings
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      tags:
        - "booking"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

  /staff/login:
    post:
      summary: Log in and return authentication cookie
      tags:
        - "staff-account"
      requestBody:
        required: true
        description: "A JSON object containing the login and password."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestLogin"
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=abcdef12345ABCD; Path=/;


  /staff/register:
    post:
      summary: Request the creation of a new staff account
      tags:
        - "staff-account"
      responses:
        "200":
          description: OK

  /staff/shop/{shop_id}/ticket/queue:
    get:
      summary: Get detailed information about the current queue status
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      tags:
        - "staff"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

  /staff/shop/{shop_id}/booking/list:
    get:
      summary: Get detailed information about the current and future bookings
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      tags:
        - "staff"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

  /staff/shop/{shop_id}/token/info:
    get:
      summary: Get token information and validity
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
        - in: query
          name: "code"
          required: true
          schema:
            type: string
      tags:
        - "staff"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: # TODO: Check
                  status:
                    type: string
                    enum:
                    - "expired"
                    - "invalid"
                    - "valid"
                    - "active"
      security:
        - staffAuth: []

  /staff/shop/{shop_id}/ticket/new-substitute:
    post:
      tags:
        - "staff"
      summary: Request creation of a substitute ticket
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestTicket"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenTicket"
        "400":
          description: Error
      security:
        - staffAuth: []

  /staff/shop/{shop_id}/token/log-entry:
    post:
      summary: Log entry, consume the token and update shop occupancy information
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      tags:
        - "staff"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

  /staff/shop/{shop_id}/token/log-exit:
    post:
      summary: Log exit, update shop occupancy information
      parameters:
        - in: path
          name: "shop_id"
          required: true
          schema:
            type: string
      tags:
        - "staff"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

  /staff/manage/add-shop:
    post:
      summary: Add a new shop to the database
      tags:
        - "manage"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

  /staff/manage/edit-shop:
    post:
      summary: Edit a shop listing
      tags:
        - "manage"
      responses:
        "200":
          description: OK
      security:
        - staffAuth: []

components:
  schemas:
    RequestRegister:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RequestLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        remember:
          type: boolean
    RequestBooking:
      type: object
      properties:
        shop_id:
          type: string
        department_ids:
          type: array
          items:
            type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    RequestTicket:
      type: object
      properties:
        shop_id:
          type: string
        department_ids:
          type: array
          items:
            type: string
    TokenBooking:
      type: object
      properties:
        uid:
          type: string
        shop_id:
          type: string
        department_ids:
          type: array
          items:
            type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    TokenTicket:
      type: object
      properties:
        uid:
          type: string
        shop_id:
          type: string
        department_ids:
          type: array
          items:
            type: string
        expiration:
          type: string
          format: date-time
    Tokens:
      type: object
      properties:
        tickets:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/TokenTicket"
        bookings:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/TokenBooking"
    QueueEst:
      type: object
      properties:
        people:
          type: integer
        est:
          type: string
          format: date-time
        

  securitySchemes:
    customerAuth:
      type: apiKey
      in: cookie
      name: SESSIONID
    staffAuth:
      type: apiKey
      in: cookie
      name: SESSIONID
